services:
  mariadb:
    image: mariadb:11.7.2
    container_name: mariadb
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=job_journaler
    volumes:
      - mysql:/var/lib/mysql
    # Uncomment these lines to communicate with the database separately
    #    ports:
    #      - "3306:3306"
    networks:
      - app_network

  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: oauth2-proxy
    environment:
      OAUTH2_PROXY_HTTP_ADDRESS: "http://oauth2-proxy:4180"
      OAUTH2_PROXY_PROVIDER: google
      OAUTH2_PROXY_CLIENT_ID: "${OAUTH2_PROXY_CLIENT_ID}"
      OAUTH2_PROXY_CLIENT_SECRET: "${OAUTH2_PROXY_CLIENT_SECRET}"
      OAUTH2_PROXY_COOKIE_SECRET: "${OAUTH2_PROXY_COOKIE_SECRET}"
      OAUTH2_PROXY_EMAIL_DOMAINS: "*"
      OAUTH2_PROXY_UPSTREAMS: "http://spring-boot-app:8080/"
      OAUTH2_PROXY_REDIRECT_URL: "http://localhost:80/oauth2/callback"
    depends_on:
      - spring-boot-app
    networks:
      - app_network

  spring-boot-app:
    build:
      context: .
      dockerfile: ./spring-boot-app/Dockerfile
    container_name: spring-boot-app
    depends_on:
      - mariadb
    # Uncomment these lines to test the backend separately
    ports:
      - "8080:8080"
    networks:
      - app_network
    restart: on-failure

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      - spring-boot-app
    # Normally, we only need to expose the frontend, since the nginx.conf routes via the oauth2-proxy to the backend through the app_network.
    # This is preferable for safety concerns, i.e. reducing the attack surface.
    ports:
      - "80:80"
    networks:
      - app_network

volumes:
  mysql:

networks:
  app_network:
